<UserControl x:Class="Puzzle.Controls.PuzzleButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Puzzle.Controls"
			 xmlns:vm="clr-namespace:Puzzle.ViewModel"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
			 d:DataContext="{d:DesignInstance vm:VMNumberInfo, IsDesignTimeCreatable=False}"
			 >
	<UserControl.Resources>
	
		<Style x:Key="FocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
		<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
		<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
		<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
		<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
		<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
		<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
		<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
		<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
		<Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
			<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
							<Border.Effect>
								<DropShadowEffect />
							</Border.Effect>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="GlowRelated" 
												  CurrentStateChanged="GlowRelated_CurrentStateChanged">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0">
											<Storyboard>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Direction)" Storyboard.TargetName="border">
													<EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
													<EasingDoubleKeyFrame KeyTime="0:0:1" Value="315"/>
												</DoubleAnimationUsingKeyFrames>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" Storyboard.TargetName="border">
													<EasingDoubleKeyFrame KeyTime="0" Value="35"/>
													<EasingDoubleKeyFrame KeyTime="0:0:1" Value="35"/>
												</DoubleAnimationUsingKeyFrames>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.ShadowDepth)" Storyboard.TargetName="border">
													<EasingDoubleKeyFrame KeyTime="0" Value="24"/>
													<EasingDoubleKeyFrame KeyTime="0:0:1" Value="24"/>
												</DoubleAnimationUsingKeyFrames>
												<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" Storyboard.TargetName="border">
													<EasingColorKeyFrame KeyTime="0" Value="Gold"/>
													<EasingColorKeyFrame KeyTime="0:0:1" Value="Gold"/>
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualTransition>
										<VisualTransition GeneratedDuration="0" To="NotGlowing">
											<Storyboard>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" Storyboard.TargetName="border">
													<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
												</DoubleAnimationUsingKeyFrames>
												<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" Storyboard.TargetName="border">
													<EasingColorKeyFrame KeyTime="0" Value="Transparent"/>
												</ColorAnimationUsingKeyFrames>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" Storyboard.TargetName="border">
													<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												</DoubleAnimationUsingKeyFrames>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.ShadowDepth)" Storyboard.TargetName="border">
													<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
												</DoubleAnimationUsingKeyFrames>
											</Storyboard>
										</VisualTransition>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Glowing"/>
									<VisualState x:Name="NotGlowing"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
								<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

	</UserControl.Resources>	
    <Grid>
		<Button x:Name="btn1" Content="{Binding Number}" Command="{Binding Clicked}" CommandParameter="{Binding}"></Button> 
    </Grid>
</UserControl>
